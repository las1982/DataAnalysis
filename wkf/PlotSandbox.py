import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import sys
import numpy as np

vals = [2.630040911747516, 2.805376972530684, 2.104032729398013, 2.33781414377557, 3.0391583869082406, 2.5715955581531267, 2.2793687901811808, 3.0391583869082406, 2.630040911747516, 3.1560490940970194, 2.33781414377557, 2.4547048509643483, 2.33781414377557, 2.6884862653419055, 2.9807130333138514, 3.09760374050263, 2.863822326125073, 2.7469316189362947, 2.33781414377557, 2.162478082992402, 2.863822326125073, 2.2793687901811808, 2.863822326125073, 2.6884862653419055, 2.33781414377557, 2.630040911747516, 2.5131502045587375, 2.863822326125073, 2.922267679719462, 2.922267679719462, 2.220923436586791, 3.0391583869082406, 2.6884862653419055, 3.506721215663355, 2.805376972530684, 2.805376972530684, 2.630040911747516, 2.396259497369959, 2.6884862653419055, 2.5131502045587375, 2.630040911747516, 2.5131502045587375, 3.2144944476914086, 3.1560490940970194, 2.7469316189362947, 2.6884862653419055, 2.805376972530684, 2.922267679719462, 2.863822326125073, 2.396259497369959, 2.4547048509643483, 1.9871420222092344, 2.5131502045587375, 2.805376972530684, 2.7469316189362947, 2.4547048509643483, 2.4547048509643483, 2.5131502045587375, 3.331385154880187, 3.7405026300409117, 2.863822326125073, 3.1560490940970194, 2.7469316189362947, 2.9807130333138514, 2.5131502045587375, 2.7469316189362947, 2.9807130333138514, 2.396259497369959, 2.0455873758036236, 2.6884862653419055, 2.630040911747516, 2.7469316189362947, 2.396259497369959, 2.396259497369959, 2.396259497369959, 2.9807130333138514, 2.162478082992402, 2.5715955581531267, 2.5715955581531267, 2.33781414377557, 2.863822326125073, 2.396259497369959, 2.220923436586791, 3.2729398012857978, 2.5131502045587375, 3.09760374050263, 2.922267679719462, 2.5715955581531267, 2.630040911747516, 3.2729398012857978, 2.33781414377557, 2.630040911747516, 2.863822326125073, 2.7469316189362947, 2.6884862653419055, 2.2793687901811808, 2.922267679719462, 2.220923436586791, 2.5131502045587375, 2.396259497369959, 2.922267679719462, 2.5715955581531267, 2.33781414377557, 2.5131502045587375, 2.5715955581531267, 2.805376972530684, 2.4547048509643483, 2.6884862653419055, 2.2793687901811808, 2.922267679719462, 2.4547048509643483, 2.7469316189362947, 5.610753945061368, 2.6884862653419055, 2.9807130333138514, 2.922267679719462, 2.7469316189362947, 3.1560490940970194, 2.4547048509643483, 2.162478082992402, 2.5131502045587375, 2.9807130333138514, 2.5131502045587375, 3.1560490940970194, 2.863822326125073, 2.5131502045587375, 2.630040911747516, 2.6884862653419055, 2.2793687901811808, 2.5131502045587375, 2.7469316189362947, 2.6884862653419055, 3.0391583869082406, 2.630040911747516, 2.7469316189362947, 3.389830508474576, 3.0391583869082406, 2.33781414377557, 2.922267679719462, 2.5715955581531267, 3.1560490940970194, 2.630040911747516, 2.9807130333138514, 2.5715955581531267, 2.630040911747516, 2.7469316189362947, 2.805376972530684, 2.162478082992402, 2.805376972530684, 3.09760374050263, 2.6884862653419055, 3.1560490940970194, 3.2729398012857978, 2.9807130333138514, 2.922267679719462, 2.5715955581531267, 2.7469316189362947, 2.5715955581531267, 2.922267679719462, 2.9807130333138514, 2.805376972530684, 2.6884862653419055, 2.33781414377557, 2.805376972530684, 2.922267679719462, 3.2144944476914086, 2.396259497369959, 2.6884862653419055, 2.2793687901811808, 2.805376972530684, 2.863822326125073, 2.9807130333138514, 2.630040911747516, 2.6884862653419055]
print(np.percentile(vals, 15))
print(np.percentile(vals, 85))
vals1 = [154, 230, 245, 271, 256, 240, 428, 189, 253, 185, 171, 525, 466, 239, 233, 144, 186, 251, 199, 165, 306, 287,
         477, 268, 376, 467, 439, 381, 489, 207, 363, 261, 277, 253, 171, 193, 248, 159, 259, 552, 166, 261, 412, 393,
         257, 386, 247, 432, 365, 256, 253, 392, 154, 146, 515, 283, 200, 159, 160, 432, 292, 168, 385, 347, 316, 179,
         355, 159, 170, 216, 199, 209, 231, 386, 425, 391, 247, 497, 243, 194, 195, 159, 167, 336, 379, 287, 182, 197,
         393, 155, 417, 339, 250, 512, 273, 375, 230, 367, 233, 155, 233, 186, 458, 396, 164, 284, 241, 257, 474, 288,
         169, 386, 198, 337, 280, 225, 193, 312, 222, 298, 410]
print(np.percentile(vals1, 15))
print(np.percentile(vals1, 85))
sys.exit(0)

bb = np.arange(0, 100, 0.1)
ranges = [(round(bb[s], 1), round(bb[s + 1], 1)) for s in range(bb.size - 1)]


# print(ranges)

def get_range(val):
    global ranges
    for i in ranges:
        if i[0] <= val < i[1]:
            return i


df = pd.DataFrame({"val": pd.Series(vals)})
df["range"] = df["val"].apply(lambda val: next(i for i in ranges if i[0] <= val < i[1]))
df["range_s"] = df["val"].apply(lambda val: next(i for i in ranges if i[0] <= val < i[1])[0])
df["range_e"] = df["val"].apply(lambda val: next(i for i in ranges if i[0] <= val < i[1])[1])
df = df[["range", "val"]]
df = df.groupby(["range"]).count()

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)

x = pd.Series(df["val"].values).index
x_lab = [str(x) for x in df.index]
y = df["val"].values
print("x:", x, "\ny:", y, "\nx_lab", x_lab)
rects1 = ax.bar(x, y)
ax.set_xticklabels(x_lab)
plt.show()
sys.exit(0)
# _1 = fig.add_subplot(2, 2, 1)
# fig.add_subplot(2, 2, 2)
# fig.add_subplot(2, 2, 3)
i = 1
for data in datas:
    data = data[['result', 'InFilterResult']]
    data.InFilterResult = data.InFilterResult.round(1)
    TPcount = pd.DataFrame(data[data.result == 'TP'].groupby(['InFilterResult'])['result'].count())
    FPcount = pd.DataFrame(data[data.result == 'FP'].groupby(['InFilterResult'])['result'].count())
    result = TPcount.join(FPcount, how='outer', lsuffix='TP', rsuffix='FP').fillna(value=0)
    # print result

    # fig, ax = plt.subplots()
    ax = fig.add_subplot(2, 2, i)
    i = i + 1

    rects1 = ax.bar(ind, TPs, width, color='g')
    rects2 = ax.bar(ind + width, FPs, width, color='r')
    # rects1 = plt.bar(ind, TPs, width, color='g', bottom=FPs)
    # rects2 = plt.bar(ind, FPs, width, color='r')

    # add some text for labels, title and axes ticks
    ax.set_title('Counts of TPs and FPs')
    ax.set_xlabel('Percentage of combinations what are in a filter')
    ax.set_ylabel('Counts')
    # ax.set_xticks(ind + width / 2)
    # ax.set_xticklabels(result.index)

    ax.legend((rects1[0], rects2[0]), ('TPs', 'FPs'))
plt.show()
